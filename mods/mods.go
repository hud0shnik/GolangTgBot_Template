package mods

import (
	"bytes"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/spf13/viper"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
type TelegramResponse struct {
	Result []Update `json:"result"`
}

type Update struct {
	UpdateId int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Message struct {
	Chat Chat   `json:"chat"`
	Text string `json:"text"`
}

type Chat struct {
	ChatId int `json:"id"`
}

type BotMessage struct {
	ChatId int    `json:"chat_id"`
	Text   string `json:"text"`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func SendMessage(botUrl string, update Update, msg string) error {
	// –ó–∞–ø–∏—Å—å —Ç–æ–≥–æ, —á—Ç–æ –∏ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
	botMessage := BotMessage{
		ChatId: update.Message.Chat.ChatId,
		Text:   msg,
	}

	// –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ json
	buf, err := json.Marshal(botMessage)
	if err != nil {
		fmt.Println("Marshal json error: ", err)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
	if err != nil {
		return err
	}
	return nil
}

// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
func Help(botUrl string, update Update) {
	SendMessage(botUrl, update, "–ü—Ä–∏–≤–µ—Çüëãüèª, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"+
		"\n\n/command - –∫–æ–º–∞–Ω–¥–∞ 1")
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (–≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤)
func InitConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("config")

	return viper.ReadInConfig()
}
