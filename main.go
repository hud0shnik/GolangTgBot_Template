package main

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"

	"github.com/spf13/viper"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
type TelegramResponse struct {
	Result []Update `json:"result"`
}

type Update struct {
	UpdateId int     `json:"update_id"`
	Message  Message `json:"message"`
}

type Message struct {
	Chat Chat   `json:"chat"`
	Text string `json:"text"`
}

type Chat struct {
	ChatId int `json:"id"`
}

type BotMessage struct {
	ChatId int    `json:"chat_id"`
	Text   string `json:"text"`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func sendMessage(botUrl string, update Update, msg string) error {
	// –ó–∞–ø–∏—Å—å —Ç–æ–≥–æ, —á—Ç–æ –∏ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
	botMessage := BotMessage{
		ChatId: update.Message.Chat.ChatId,
		Text:   msg,
	}

	// –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ json
	buf, err := json.Marshal(botMessage)
	if err != nil {
		log.Println("Marshal json error: ", err)
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
	if err != nil {
		return err
	}
	return nil
}

// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥
func help(botUrl string, update Update) {
	sendMessage(botUrl, update, "–ü—Ä–∏–≤–µ—Çüëãüèª, –≤–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:"+
		"\n\n/command - –∫–æ–º–∞–Ω–¥–∞ 1")
}

func main() {
	log.Println("Config error: ")
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ (—Ç–æ–∫–µ–Ω–æ–≤)
	err := initConfig()
	if err != nil {
		log.Println("Config error: ", err)
		return
	}
	// Url –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø—Ä–∏—ë–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
	botUrl := "https://api.telegram.org/bot" + viper.GetString("token")
	offSet := 0

	for {
		// –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–ø–¥–µ–π—Ç–æ–≤
		updates, err := getUpdates(botUrl, offSet)
		if err != nil {
			log.Println("Something went wrong: ", err)
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ø–¥–µ–π—Ç–æ–≤
		for _, update := range updates {
			respond(botUrl, update)
			offSet = update.UpdateId + 1
		}

		// –í—ã–≤–æ–¥ –∞–ø–¥–µ–π—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
		// fmt.Println(updates)
	}
}

func getUpdates(botUrl string, offset int) ([]Update, error) {
	// Rest –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ø–¥–µ–π—Ç–æ–≤
	resp, err := http.Get(botUrl + "/getUpdates?offset=" + strconv.Itoa(offset))
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	// –ó–∞–ø–∏—Å—å –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	var restResponse TelegramResponse
	err = json.Unmarshal(body, &restResponse)
	if err != nil {
		return nil, err
	}

	return restResponse.Result, nil
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func respond(botUrl string, update Update) error {
	// msg - —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	msg := update.Message.Text

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥
	switch msg {
	case "/command":
		sendMessage(botUrl, update, "101!")
		return nil
	case "/help":
		help(botUrl, update)
		return nil
	}

	sendMessage(botUrl, update, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /help")
	return nil
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ (–≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤)
func initConfig() error {
	viper.AddConfigPath("configs")
	viper.SetConfigName("config")

	return viper.ReadInConfig()
}
